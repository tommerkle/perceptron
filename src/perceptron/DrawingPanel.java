package perceptron;

import java.awt.Color;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.event.MouseEvent;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Tom
 */
public class DrawingPanel extends javax.swing.JPanel {

    static final boolean DEBUG = false;

    PatternList patterns;
    Ptron tron;

    boolean drawings = false; // if there have been drawings added to a new PatternList
    PatternList drawingList;
    int dX = 15;
    int dY = 20;
    int frameX = 1000;
    int frameY = WIDTH;
    int dGridWidth = 320;
    int drawingDim = 20;
    int[][] drawingGrid;
    int dgBoxWidth = 16;
    int dgYes = 0;
    Pattern drawingPattern;
    PFrame theFrame;
    MouseEvent evt;

    /**
     * Creates new form DrawingPanel
     */
    public DrawingPanel() {
        initComponents();
    }

    DrawingPanel(PFrame frame) {
        this();
        this.theFrame = frame;
        drawingGrid = new int[drawingDim][drawingDim];
        drawingPattern = new Pattern(this, dgYes);
    }

    DrawingPanel(Frame frame) {
        frame.add(this);
        frame.setVisible(true);
        frame.setSize(400, 400);
        drawingGrid = new int[drawingDim][drawingDim];
        drawingPattern = new Pattern(this, dgYes);
    }

    public void paintComponent(Graphics g) {
        paintDrawingPadBorder(g);
        paintDrawingPad(g);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        yesCheckBox = new javax.swing.JCheckBox();
        testButton = new javax.swing.JButton();

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        setLayout(null);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        add(addButton);
        addButton.setBounds(100, 340, 75, 29);

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        add(clearButton);
        clearButton.setBounds(30, 340, 76, 29);

        yesCheckBox.setText("Yes");
        yesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesCheckBoxActionPerformed(evt);
            }
        });
        add(yesCheckBox);
        yesCheckBox.setBounds(180, 340, 54, 23);

        testButton.setText("Test");
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });
        add(testButton);
        testButton.setBounds(250, 340, 97, 29);
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        this.evt = evt;

        int x = evt.getX();
        int y = evt.getY();

        if (x > dX && x < dX + dGridWidth && y > dY && y < dY + dGridWidth) {
            int col = (x - dX) / dgBoxWidth;
            int row = (y - dY) / dgBoxWidth;

            int num = drawingGrid[row][col];
            drawingGrid[row][col] = Math.abs(num - 1);
            // add a 1 to the (x,y)th cell of the drawing grid
        }
        repaint();
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        int x = evt.getX();

        int y = evt.getY();

        if (x > dX && x < dX + dGridWidth && y > dY && y < dY + dGridWidth) {
            draw(x, y); // add a 1 to the (x,y)th cell of the drawing grid
        }
        repaint();
    }//GEN-LAST:event_formMouseDragged

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

        System.out.println("dgYes = " + dgYes);
        Pattern nuPattern = new Pattern(this, dgYes);

        drawingPattern = nuPattern;

        theFrame.getPanel().outputTA.setText(drawingPattern.toString());

    }//GEN-LAST:event_addButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        drawingGrid = new int[drawingDim][drawingDim];
        theFrame.getPanel().clearTheOutputTA();
        repaint();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void yesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesCheckBoxActionPerformed
        dgYes = Math.abs(dgYes - 1);

        drawingPattern.setYes(dgYes);
    }//GEN-LAST:event_yesCheckBoxActionPerformed

    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        test(new Pattern(this, dgYes));

    }//GEN-LAST:event_testButtonActionPerformed

    boolean hasDrawing() {
        return drawings;
    }

    StringList getDrawingStringList() {
        StringList returnMe = new StringList();

        //////// scan drawing pad and get
        return returnMe;
    }

    int getDrawingDim() {
        return drawingDim;
    }

    private void paintDrawingPadBorder(Graphics g) {
        g.setColor(Color.BLUE);
        g.drawRect(dX - 1, dY - 1, 320 + 1, 320 + 1);
        g.setColor(Color.WHITE);
    }

    private void paintDrawingPad(Graphics g) {
        for (int row = 0; row < drawingDim; row++) {
            for (int col = 0; col < drawingDim; col++) {

                g.setColor(Color.WHITE);
                if (drawingGrid[row][col] == 1) {
                    g.setColor(Color.BLACK);

                }
                g.fillRect(dX + col * dgBoxWidth, dY + row * dgBoxWidth, dgBoxWidth, dgBoxWidth);

            }
        }
    }

    private void draw(int x, int y) {

        int col = (x - dX) / dgBoxWidth;

        int row = (y - dY) / dgBoxWidth;

        drawingGrid[row][col] = 1;
    }

    int[][] getDrawingGrid() {
        return drawingGrid;
    }

    public static void main(String[] args) {

        //TestPanel newPanel = new TestPanel(new Frame());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton testButton;
    private javax.swing.JCheckBox yesCheckBox;
    // End of variables declaration//GEN-END:variables

    private void test(Pattern pattern) {
        if (theFrame.panel.tron.hasRun) {
            
            int yes = theFrame.panel.tron.categorize(pattern, pattern.matrix);
            String ret = "NO";

            if (yes == 1) {
                ret = "YES";
            }
            theFrame.panel.outputTA.setText("\n\n\n\t    PTRON SAYS " + ret);

        }else{
            theFrame.panel.outputTA.setText("\n\n\n\t    RUN PTRON BEFORE TESTING");
        }
    }
}
