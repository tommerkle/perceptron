/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package perceptron;

import java.awt.Color;
import perceptron.io.MyWriter;
import perceptron.io.MyReader;

import java.awt.FileDialog;
import java.awt.Font;

import java.awt.Frame;
import java.awt.Graphics;
import java.io.File;

/**
 *
 * @author Tom
 */
public class PPanel extends javax.swing.JPanel {

    static final boolean DEBUG = false;
    PatternList patterns;
    Ptron tron;
    PFrame theFrame;

    boolean drawings = false; // if there have been drawings added to a new PatternList
    PatternList drawingList;
    int dX = 395;
    int dY = 330;
    int dGridWidth = 320;
    int drawingDim = 20;
    int[][] drawingGrid;
    int dgBoxWidth = 16;
    int dgYes = 0;
    Pattern drawingPattern;
    int patternX = 75, patternY = 100, weightsX = 75, weightsY = 350, boxSize = 10;
    public int patternDim = 20;

    /**
     * Creates new form PPanel
     */
    public PPanel() {
        initComponents();

    }

    public PPanel(PFrame frame) {

        this();
        initFile();
        theFrame = frame;
        drawingGrid = new int[drawingDim][drawingDim];
        drawingPattern = new Pattern(this, dgYes);
        initComboBox();

        //theController.start();
    }

    public void paintComponent(Graphics g) {

        initPatternGrid(g);
        initWeightsGrid(g);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar4 = new javax.swing.JMenuBar();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        outputTA = new javax.swing.JTextArea();
        loadButton = new javax.swing.JButton();
        patternComboBox = new javax.swing.JComboBox();
        weightsLabel = new javax.swing.JLabel();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jMenu5.setText("File");
        jMenuBar3.add(jMenu5);

        jMenu6.setText("Edit");
        jMenuBar3.add(jMenu6);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jMenu7.setText("File");
        jMenuBar4.add(jMenu7);

        jMenu8.setText("Edit");
        jMenuBar4.add(jMenu8);

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        runButton.setText("Ptron Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        outputTA.setColumns(20);
        outputTA.setRows(5);
        jScrollPane3.setViewportView(outputTA);

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        patternComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        patternComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patternComboBoxActionPerformed(evt);
            }
        });

        weightsLabel.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        weightsLabel.setText("Weights");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(weightsLabel)
                .addContainerGap(606, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(openButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(loadButton)
                .addGap(18, 18, 18)
                .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(patternComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openButton)
                    .addComponent(saveButton)
                    .addComponent(runButton)
                    .addComponent(loadButton))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(278, 278, 278)
                        .addComponent(patternComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 408, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(weightsLabel)
                        .addGap(116, 116, 116))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        MyReader mr = new MyReader();
        while (mr.hasMoreData()) {
            setTheOutputTA(mr.giveMeTheNextLine() + "\n");
        }
        mr.close();
    }//GEN-LAST:event_openButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        MyWriter mw = new MyWriter();
        mw.print(outputTA.getText());
        mw.close();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        tron.run();
        theFrame.repaint();

    }//GEN-LAST:event_runButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        initFile();
        initComboBox();
       theFrame.repaint();
    }//GEN-LAST:event_loadButtonActionPerformed

    private void patternComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patternComboBoxActionPerformed
        tron.setCurrentPattern(patternComboBox.getSelectedIndex());
        theFrame.repaint();
    }//GEN-LAST:event_patternComboBoxActionPerformed
    java.awt.event.MouseEvent evt;
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed

    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged

    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased

    }//GEN-LAST:event_formMouseReleased

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered

        {
        }    }//GEN-LAST:event_formMouseEntered

    public PatternList getPatterns() {
        return patterns;
    }

    public void setPatterns(PatternList patterns) {
        this.patterns = patterns;
    }

    public Ptron getTron() {
        return tron;
    }

    public void setTron(Ptron tron) {
        this.tron = tron;
    }

    public void inputData(File directory) { // adding all files from a directory to PatternList "patterns"
        patterns = new PatternList();
        if (DEBUG) {
            System.out.println("\n " + directory + "\n");
        }
        java.io.File[] list = directory.listFiles();
        for (int i = 0; i < list.length; i++) {
            if (DEBUG) {
                System.out.println("reading... " + list[i]);
            }
            if (!list[i].isDirectory()) {
                patterns.addPattern(new Pattern(list[i].getAbsolutePath()));
            }
        }
    }

    private String getDirectoryName() {
        System.setProperty("apple.awt.fileDialogForDirectories", "true"); // added so that when the FileDialog opens, you may select directories
        FileDialog fd = new FileDialog(new Frame(), "Select Input File");
        fd.setDirectory("/Users/Tom/Desktop/Machine Learning/Perceptron/ptronData");

        fd.setVisible(true);
        System.out.println(fd.getDirectory());
        System.out.println(fd.getFile());

        System.setProperty("apple.awt.fileDialogForDirectories", "false");// Changing this back
        return fd.getDirectory() + fd.getFile();
        // return the complete path

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuBar jMenuBar4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton openButton;
    javax.swing.JTextArea outputTA;
    private javax.swing.JComboBox patternComboBox;
    private javax.swing.JButton runButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JLabel weightsLabel;
    // End of variables declaration//GEN-END:variables

    void setTheOutputTA(String s) {

        outputTA.append(s);
    }

    void setOutputTACarat(int i) {
        outputTA.setCaretPosition(i);
    }



    private void initFile() {

        outputTA.setText(""); // Clear the TAs before every time a file is echoed into the TA
        try {
            File file = new File(getDirectoryName());
            if (!file.canExecute()) {
                System.exit(0);
            }
            System.out.println("file = " + file.canExecute());
            inputData(file);
            String path = file.toString();//Put the Data from a selected file into the PatternList "patterns"
            tron = new Ptron(this, path);

        } catch (Exception e) {
            System.out.println("Error: " + e);
        }
    }

    private void initComboBox() {
        int count = 1;
        patternComboBox.removeAllItems();
        for (Pattern p : patterns) {
            patternComboBox.addItem("Pattern " + count);
            count++;
        }

    }

    void clearTheOutputTA() {
        outputTA.setText("");
    }

    void setOutputTAFont(Font font) {
        outputTA.setFont(font);
    }

    boolean hasDrawing() {
        return drawings;
    }

    StringList getDrawingStringList() {
        StringList returnMe = new StringList();

        //////// scan drawing pad and get
        return returnMe;
    }

    int getDrawingDim() {
        return drawingDim;
    }

    void initPatternGrid(Graphics g) {
        int patternNo = tron.getCurrentPattern();
        g.setColor(Color.BLUE);
        g.drawRect(patternX - 1, patternY - 1, (patternDim * boxSize) + 2, (patternDim * boxSize) + 2);
        for (int row = 0; row < patternDim; row++) {
            for (int col = 0; col < patternDim; col++) {
                if (patterns.get(patternNo).getList().get(row).charAt(col) != '*') {
                    g.setColor(Color.white);
                }
                g.fillRect(patternX + col * boxSize, patternY + row * boxSize, boxSize, boxSize);
                g.setColor(Color.BLACK);
            }
        }
    }

    private void initWeightsGrid(Graphics g) {
        for (int row = 0; row < patternDim; row++) {
            for (int col = 0; col < patternDim; col++) {

                if (tron.weights[row][col] < 0) {
                    g.setColor(Color.RED);
                } else if (tron.weights[row][col] > 0) {
                    g.setColor(Color.GREEN);
                } else {

                    g.setColor(Color.BLUE);
                }

                g.fillRect(weightsX + col * boxSize, weightsY + row * boxSize, boxSize, boxSize);

            }
        }
    }

    int[][] getDrawingGrid() {
        return drawingGrid;
    }

}
